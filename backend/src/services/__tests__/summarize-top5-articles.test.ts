import { describe, it, expect, vi } from 'vitest';
import { SummarizeTop5ArticlesService } from '../article/summarize-top5-articles.service';
import { SearchArticlesService } from '../article/search-articles.service';
import { SummarizeArticleService } from '../article/summarize-article.service';
import { SaveArticleSummaryService } from '../article/save-article-summary.service';
import type { QuitaArticle } from '../../domain/quita-domain';
import type { QuitaArticleSummary } from '../../domain/quita-domain';

describe('SummarizeTop5ArticlesService', () => {
  const mockArticles: readonly QuitaArticle[] = [
    {
      id: 'article-1',
      title: 'Test Article 1',
      url: 'https://example.com/test1',
      likes_count: 100,
      created_at: '2024-01-01T00:00:00Z',
      updated_at: '2024-01-01T00:00:00Z',
      body: 'Test body 1',
      rendered_body: '<p>Test body 1</p>',
      tags: [],
      user: {
        id: 'user-1',
        name: 'Test User 1',
      },
    },
    {
      id: 'article-2',
      title: 'Test Article 2',
      url: 'https://example.com/test2',
      likes_count: 50,
      created_at: '2024-01-02T00:00:00Z',
      updated_at: '2024-01-02T00:00:00Z',
      body: 'Test body 2',
      rendered_body: '<p>Test body 2</p>',
      tags: [],
      user: {
        id: 'user-2',
        name: 'Test User 2',
      },
    },
  ];

  const mockSummaries: readonly QuitaArticleSummary[] = [
    {
      id: 'summary-1',
      title: 'Test Article 1',
      url: 'https://example.com/test1',
      summary: {
        heading: 'Test Summary 1',
        catch: 'Test catch 1',
        summaryText: 'Test summary text 1',
        targetAudience: 'Test audience 1',
      },
      originalArticle: mockArticles[0],
      disclaimer: 'This summary was generated by AI.',
      created_at: '2024-01-01T00:00:00Z',
      updated_at: '2024-01-01T00:00:00Z',
      keyword: 'test',
    },
    {
      id: 'summary-2',
      title: 'Test Article 2',
      url: 'https://example.com/test2',
      summary: {
        heading: 'Test Summary 2',
        catch: 'Test catch 2',
        summaryText: 'Test summary text 2',
        targetAudience: 'Test audience 2',
      },
      originalArticle: mockArticles[1],
      disclaimer: 'This summary was generated by AI.',
      created_at: '2024-01-02T00:00:00Z',
      updated_at: '2024-01-02T00:00:00Z',
      keyword: 'test',
    },
  ];

  const mockSearchArticlesService = {
    execute: vi.fn().mockResolvedValue(mockArticles),
  } as unknown as SearchArticlesService;

  const mockSummarizeArticleService = {
    execute: vi.fn().mockImplementation((article: QuitaArticle, keyword: string) => {
      const index = mockArticles.findIndex(a => a.id === article.id);
      return Promise.resolve(mockSummaries[index]);
    }),
  } as unknown as SummarizeArticleService;

  const mockSaveArticleSummaryService = {
    execute: vi.fn().mockResolvedValue(undefined),
  } as unknown as SaveArticleSummaryService;

  it('should execute summarize top 5 articles workflow successfully', async () => {
    const service = new SummarizeTop5ArticlesService(
      mockSearchArticlesService,
      mockSummarizeArticleService,
      mockSaveArticleSummaryService
    );

    const result = await service.execute({
      keyword: 'test',
      created_at: {
        from: '2024-01-01T00:00:00Z',
        to: '2024-01-02T00:00:00Z',
      },
    });

    // 検索が呼ばれることを確認
    expect(mockSearchArticlesService.execute).toHaveBeenCalledWith({
      keyword: 'test',
      created_at: {
        from: '2024-01-01T00:00:00Z',
        to: '2024-01-02T00:00:00Z',
      },
    });

    // 各記事に対して要約が呼ばれることを確認
    expect(mockSummarizeArticleService.execute).toHaveBeenCalledTimes(2);
    expect(mockSummarizeArticleService.execute).toHaveBeenCalledWith(mockArticles[0], 'test');
    expect(mockSummarizeArticleService.execute).toHaveBeenCalledWith(mockArticles[1], 'test');

    // 各要約に対して保存が呼ばれることを確認
    expect(mockSaveArticleSummaryService.execute).toHaveBeenCalledTimes(2);
    expect(mockSaveArticleSummaryService.execute).toHaveBeenCalledWith(mockSummaries[0]);
    expect(mockSaveArticleSummaryService.execute).toHaveBeenCalledWith(mockSummaries[1]);

    // 結果が正しく返されることを確認
    expect(result).toEqual(mockSummaries);
  });
});